/* Auto-generated by: https://github.com/pmndrs/gltfjsx */

import * as THREE from "three";
import React, { useRef, useEffect, Suspense } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Canvas, useFrame, useThree } from "@react-three/fiber";
import { Loader, PerspectiveCamera } from "@react-three/drei";
import { Glitch, EffectComposer } from "@react-three/postprocessing";

type GLTFResult = GLTF & {
  nodes: {
    ["Zeus_objOBJ4019641E-523E-4BFF-9876-5D9E2EF34967"]: THREE.Mesh;
  };
  materials: {
    ["Default OBJ"]: THREE.MeshStandardMaterial;
  };
};

export function Zeus(props: { groupProps?: JSX.IntrinsicElements["group"] }) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF("/assets/models/Zeus.glb") as GLTFResult;
  return (
    <group ref={group} {...props.groupProps} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={
          nodes["Zeus_objOBJ4019641E-523E-4BFF-9876-5D9E2EF34967"].geometry
        }
        rotation={[Math.PI / 2, 0, 0]}
      >
        <meshStandardMaterial />
      </mesh>
    </group>
  );
}

useGLTF.preload("/assets/models/Zeus.glb");

function Spheres(props: { groupProps?: JSX.IntrinsicElements["group"] }) {
  const grp = useRef<THREE.Group>();

  useFrame((state) => {
    grp.current!.children[0].position.x = THREE.MathUtils.lerp(
      grp.current!.children[0].position.x,
      -2 - state.mouse.x * 3,
      0.02
    );
    grp.current!.children[1].position.x = THREE.MathUtils.lerp(
      grp.current!.children[1].position.x,
      2 - state.mouse.x * 4,
      0.01
    );
  });

  return (
    <group ref={grp} {...props}>
      <mesh castShadow position={[0, 1, -2.5]} scale={2}>
        <sphereBufferGeometry args={[1, 64, 64]} />
        <meshStandardMaterial color="white" roughness={2} />
      </mesh>
      <mesh castShadow position={[0, -0.7, 1]} scale={0.3}>
        <sphereBufferGeometry args={[1, 64, 64]} />
        <meshStandardMaterial color="white" roughness={2} />
      </mesh>
    </group>
  );
}

function ZeusSceneSetup() {
  const { camera } = useThree();
  const lookAtPosition = new THREE.Vector3(0, 0, 0);

  useEffect(() => {
    camera.lookAt(lookAtPosition);
  });

  return (
    <>
      <PerspectiveCamera makeDefault position={[0, 1, 5]} />
      <Zeus />
      <Spheres />
      <pointLight color="white" intensity={0.5} position={[-1, 0, 0.5]} />
    </>
  );
}

export interface ZeusSceneProps {
  style: any;
}

export default function ZeusScene(props: ZeusSceneProps) {
  return (
    <>
      <Canvas color={"#F4EBD0"} style={props.style} className="gallery-canvas">
        <color attach="background" args={["#F4EBD0"]} />
        <Suspense fallback={null}>
          <ZeusSceneSetup />
          <EffectComposer>
            <Glitch />
          </EffectComposer>
        </Suspense>
      </Canvas>
      <Loader />
    </>
  );
}
