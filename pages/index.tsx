import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import React, { useEffect, useState, useMemo } from "react";

// Import components
import { AnimatedTextGeoms, BasicExamples } from "../components/basicExamples";
import BreathingDots from "../components/BreathingDots";
import ZeusScene from "../components/Zeus";
import ShowcaseScene from "../components/Showcase";
import ParticleField from "../components/ParticleNet";
import VanillaTea from "../components/VanillaTea";
import CustomCursor from "../components/CustomCursor";
// import MirrorScene from '../components/MirrorScene'
import BasicPhysics from "../components/BasicPhysics";
// import ImportedModelPhysics from '../components/ImportedModelPhysics'
import RippleScene from "../components/Ripple";
import ProceduralMesh from "../components/ProceduralMesh";

const Home: NextPage = () => {
  const galleryStyle = { height: "50vh", width: "45vw", minWidth: "528px" };

  const galleryItems = useMemo(() => {
    return [
      {
        title: "Instancing n teacups + camera/animation effects",
        component: <VanillaTea style={galleryStyle} />,
      },
      {
        title: "Text animation test",
        component: <AnimatedTextGeoms style={galleryStyle} />,
      },
      {
        title: "Controlling camera with mouse, using the Instances element",
        component: <BasicExamples style={galleryStyle} />,
      },
      {
        title: "Breathing Dots",
        component: <BreathingDots style={galleryStyle} />,
      },
      {
        title: "More detailed imported model; mouse repel effect, glitch",
        component: <ZeusScene style={galleryStyle} />,
      },
      {
        title: "",
        component: <ShowcaseScene style={galleryStyle} />,
      },
      {
        title: "Particle field",
        component: <ParticleField style={galleryStyle} />,
      },
      {
        title: "Basic physics demo",
        component: <BasicPhysics style={galleryStyle} />,
      },
      {
        title: "Particle ripple",
        component: <RippleScene which="ripple" style={galleryStyle} />,
      },
      {
        title: "Procedural mesh",
        component: <ProceduralMesh style={galleryStyle} />,
      },
      {
        title: "Procedural particles",
        component: <RippleScene which="particle" style={galleryStyle} />,
      },
    ];
  }, []);

  const [page, setPage] = useState(1);
  const itemsPerPage = 2;
  const numPages = useMemo(
    () => Math.ceil(galleryItems.length / itemsPerPage),
    [galleryItems, itemsPerPage]
  );

  return (
    <div className="page">
      <Head>
        <title>3js/r3f</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <CustomCursor />

      <div className="page-container">
        <div className="examples-container">
          {galleryItems
            .slice(itemsPerPage * (page - 1), itemsPerPage * page)
            .map((el, i) => {
              return (
                <div className="gallery-item" key={`${el}${i}`}>
                  <h2>{el.title}</h2>
                  {el.component}
                </div>
              );
            })}
        </div>
        <div className="page-numbers">
          <span onClick={() => (page === 1 ? null : setPage(page - 1))}>←</span>
          {Array.apply(null, Array(numPages + 1))
            .map(function (_, i) {
              return i;
            })
            .slice(1)
            .map((el, i) => (
              <span key={i} onClick={() => setPage(el)}>
                {el === page ? <strong>{el}</strong> : el}
              </span>
            ))}
          <span onClick={() => (page === numPages ? null : setPage(page + 1))}>
            →
          </span>
        </div>
      </div>

      {/* <Link href="/demos/usefulLinks" passHref>
        <button>Useful links</button>
      </Link> */}
    </div>
  );
};

export default Home;
